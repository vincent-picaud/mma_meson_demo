#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
#+TITLE: Wolfram LibraryLink + Meson
  
* What is it?

The goal is to use the [[https://mesonbuild.com/][Meson build system]] to define an *easy to use* and
*portable* solution for Mathematica [[https://reference.wolfram.com/language/LibraryLink/tutorial/InteractionWithMathematica.html][Wolfram LibraryLink developments]]. This GitHub
repo is a small illustrative example.

* How to use it?

#+BEGIN_SRC sh :eval never
git clone git@github.com:vincent-picaud/mma_meson_demo.git
cd mma_meson_demo
meson build 
cd build
ninja install
#+END_SRC

Then, under Mathematica (MMA):

#+BEGIN_SRC wolfram :eval never
<<"sparseDemoPackage`"
?sparseDemoPackage`*
s=SparseArray[{{1,0,0},{2 ,0,3}}]
test[s] // TableForm
#+END_SRC

* Help needed

I have no access to Windows. It would we nice to have some feedback
concerning this platform.

- [X] Mathematica v10.0 + Linux
- [X] Mathematica v11.2 + Linux
- [X] Mathematica  + MacOS
- [ ] Mathematica  + Windows ? 

* Main files

#+BEGIN_QUOTE
+ config.wls   <-- *MMA script to extract configuration information*
+ meson.build  <-- *Meson build system file*
+ README.org   <-- *this file*
+ sandbox/     <-- *contains MMA files to check it works*
	+ demo_sparse_manual.wls <-- *manual steps, without using Meson*
	+ demo_sparse.wls        <-- *automatic build using Meson*
+ src/         <-- *package sources, including C++, C and MMA codes*
	+ demo_sparse.cpp        <-- *one LibraryLink example (from the MMA official doc*)
	+ meson.build            <-- *Meson build system file*
	+ sparseDemoPackage.wl   <-- *MMA package using demo_sparse.cpp*
#+END_QUOTE

* Some details 

** =config.wls=

The =config.wls= file extracts the relevant information required by the
Meson build process.

#+BEGIN_SRC sh :exports results :wrap SRC wolfram :results drawer
cat ./config.wls
#+END_SRC

#+RESULTS:
#+BEGIN_SRC wolfram
libraryLinkIncludeDirectories={FileNameJoin[{$InstallationDirectory,"SystemFiles","IncludeFiles","C"}],
			       FileNameJoin[{$InstallationDirectory,"SystemFiles","Links","MathLink","DeveloperKit",$SystemID,"CompilerAdditions"}]};
libraryInstallDirectory=FileNameJoin[{$UserBaseDirectory,"SystemFiles","LibraryResource",$SystemID}];
packageInstallDirectory=FileNameJoin[{$UserBaseDirectory,"Applications"}];

(* buildDirectory=Environment["MESON_BUILD_ROOT"]; *)

(* MMA < v10.1 does not have native StringRiffle *)
stringRiffle[stringList_List,sep_String]:=TextString[stringList, ListFormat -> {"", sep, ""}];

format[s_List]:=stringRiffle[s,","]

(* stdout result *)
Print[format[libraryLinkIncludeDirectories]<>";"<>libraryInstallDirectory<>";"<>packageInstallDirectory]

#+END_SRC

** Meson files 

I tried to only use the strict minimum to make it works.

*** =./meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
project('Meson_MMA_Demo', 'cpp')

mma_wolframscript = find_program('wolfram')

maa_config = run_command(mma_wolframscript,'-script',files('config.wls'),
			check: true)

maa_config = maa_config.stdout().split(';')

mma_include_directories = include_directories(maa_config.get(0).split(','))
mma_library_install_dir = maa_config.get(1).strip() # caveat: strip is mandatory to get 
mma_package_install_dir = maa_config.get(2).strip() # a correct filename

message('MMA library installation directory: '+mma_library_install_dir)
message('MMA package installation directory: '+mma_package_install_dir)

subdir('src')

#+END_SRC

*** =./src/meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./src/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
demo_sparse_sources = ['demo_sparse.cpp']

shared_library('demo_sparse',
	       sources: [demo_sparse_sources],
	       include_directories: mma_include_directories,
	       install: true,
	       install_dir: mma_library_install_dir)

install_data('sparseDemoPackage.wl',
	     install_dir: mma_package_install_dir )
	     
#+END_SRC
