#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
#+TITLE: Wolfram LibraryLink + Meson
  
* What is it?

The goal is to use the [[https://mesonbuild.com/][Meson build system]] to define an *easy to use* and
*portable* solution for Mathematica [[https://reference.wolfram.com/language/LibraryLink/tutorial/InteractionWithMathematica.html][Wolfram LibraryLink developments]]. This GitHub
repo is a small illustrative example.

* How to use it?

** Compile and install the package 

#+BEGIN_SRC sh :eval never
git clone git@github.com:vincent-picaud/mma_meson_demo.git
cd mma_meson_demo
meson build --prefix=./install_dir
cd build
ninja install
#+END_SRC

#+BEGIN_QUOTE
*Remark*: [required --prefix=./install_dir]

This demo will generate two dynamic libraries:
- =libmyLib.so= a regular C++ library (totally independent of MMA)
- =libmylibMMA.so= a dynamic library that uses MMA's LibraryLink to wrap functions contained in =libmyLib.so=.

By default =libmylibMMA.so= is installed in the user directory
(=$HOME/.Mathematica/SystemFiles/LibraryResources/Linux-x86-64= in my
case). You can change that if you want (for the moment by modifying
the meson.build file). However the important point to understand is
that =libmylibMMA.so= needs to know where the =libmyLib.so= library is. We
provide this information by embedding this location into
=libmylibMMA.so= using its [[https://amir.rachum.com/blog/2016/09/17/shared-libraries/][=rpath= section]]. This section is filled
(without pain using [[https://mesonbuild.com/Reference-manual.html#executable][Meson install_rpath option]]!) at *installation*
time. That is the reason why we define the =--prefix= variable to
*locally* install =libmyLib.so=. If this =--prefix= variable is not defined
everything works equally well except that you will need extra
permissions to do a *system* install (triggered by =ninja install=).
#+END_QUOTE

** Mathematica side

Then, under Mathematica (MMA):

#+BEGIN_SRC wolfram :eval never
<< myLib`

?"myLib`*"
data = {2, 1, 3, 5, 6, 6, 4, 3, 2, 4, 7, 3, 2, 4, 2, 2, 1};
algorithm1[data, 10]
#+END_SRC

#+BEGIN_QUOTE
*Remark*: [ =myLib`Private`unload[]= ]

During development, if you recompile the c++ code, you must unload the
library to make MMA taking account the modification. To do that you
only have to call: =myLib`Private`unload[]= under MMA session.
#+END_QUOTE

* Portability

I have no access to Windows. It would we nice to have some feedback
concerning this platform. So far, tested with MMA V11.2 under these
platforms:

- [X] Mathematica  + Linux
- [X] Mathematica  + MacOS
- [ ] Mathematica  + Windows ? 

* How it works?

** meson.build 

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC wolfram
# This is a minimal example showing how to integrate C++ and Mathematica's LibraryLink
# Tested under MMA V11.2, Linux
#
project('Meson_MMA_Demo', 'cpp')

subdir('src')

# MMA part 
mma_wolframscript = find_program('wolframscript')

if mma_wolframscript.found()
  subdir('mma')
else
  warning('Mathematica not found!')
endif

#+END_SRC

The =src= directory contains a [[id:d407fd61-1f5e-41a6-ae97-c6c813189ae3][regular C++ meson project]]. Then we test
if =wolframscript= is present, if so we move to the [[id:cb7df95d-6f7c-4dc9-8b44-b80a54c87b4d][=mma= directory]]. [[mma_directory][mma directory]]

#+BEGIN_QUOTE
*Remark*: Even if you do not have MMA installed the C++ library part is
properly compiled and installed.
#+END_QUOTE

** ./src/meson.build
   :PROPERTIES:
   :ID:       d407fd61-1f5e-41a6-ae97-c6c813189ae3
   :END:

This is a regular C++ Meson project:

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./src/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
inc = include_directories('.')

subdir('myLib')
#+END_SRC

*** ./src/myLib/meson.build 

For this small demo we create a dynamic library =libmyLib.so=
containing only one file =algorithm1.cpp=. You can obviously add others
files by appending them to =myLib_headers= and =myLib_sources=.


#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./src/myLib/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
myLib_headers = ['algorithm1.hpp']
myLib_sources = ['algorithm1.cpp']

myLib_lib = library('myLib',
		   include_directories : inc,
		   install : true,
		   sources: [myLib_headers,myLib_sources])

myLib_dep = declare_dependency(include_directories : inc,
			      link_with : myLib_lib)

install_headers(myLib_headers,
		subdir : 'myLib')

#+END_SRC

** ./mma/meson.build <<mma_directory>>
   :PROPERTIES:
   :ID:       cb7df95d-6f7c-4dc9-8b44-b80a54c87b4d
   :END:


#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./mma/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
maa_config = run_command(mma_wolframscript,'-f',files('config.wls'), check: true)

maa_config = maa_config.stdout().split(';')

mma_include_directories = include_directories(maa_config.get(0).split(','))
mma_library_install_dir = maa_config.get(1).strip() # caveat: strip is mandatory to get 
mma_package_install_dir = maa_config.get(2).strip() # a correct filename

message('MMA library installation directory: '+mma_library_install_dir)
message('MMA package installation directory: '+mma_package_install_dir)

#----------------
# C++ sources
#----------------

myLibMMA_sources = ['algorithm1_mma.cpp']

shared_library('myLibMMA',
	       sources: [myLibMMA_sources],
	       dependencies: [myLib_dep],
	       include_directories: mma_include_directories,
	       install: true,
	       # libmyLibMMA.so needs to find libmyLib.so, this can be done using rpath
	       install_rpath: join_paths(get_option('prefix'),get_option('libdir')),
	       install_dir: mma_library_install_dir)

#----------------
# MMA package
#----------------

install_data('myLib.wl', install_dir: mma_package_install_dir )
#+END_SRC



** =config.wls=

The =config.wls= script extracts the relevant information required by the
Meson build process.

#+BEGIN_SRC sh :exports results :wrap SRC wolfram :results drawer
cat ./mma/config.wls
#+END_SRC

#+RESULTS:
#+BEGIN_SRC wolfram
libraryLinkIncludeDirectories={FileNameJoin[{$InstallationDirectory,"SystemFiles","IncludeFiles","C"}],
			       FileNameJoin[{$InstallationDirectory,"SystemFiles","Links","MathLink","DeveloperKit",$SystemID,"CompilerAdditions"}]};
libraryInstallDirectory=FileNameJoin[{$UserBaseDirectory,"SystemFiles","LibraryResources",$SystemID}];
packageInstallDirectory=FileNameJoin[{$UserBaseDirectory,"Applications"}];

(* MMA < v10.1 does not have native StringRiffle *)
stringRiffle[stringList_List,sep_String]:=TextString[stringList, ListFormat -> {"", sep, ""}];
format[s_List]:=stringRiffle[s,","]

(* stdout result *)
Print[format[libraryLinkIncludeDirectories]<>";"<>libraryInstallDirectory<>";"<>packageInstallDirectory]

#+END_SRC

With my configuration

#+BEGIN_SRC sh :eval never 
wolframscript -f config.wls
#+END_SRC

returns 

#+BEGIN_EXAMPLE
/usr/local/Wolfram/Mathematica/11.2/SystemFiles/IncludeFiles/C,/usr/local/Wolfram/Mathematica/11.2/SystemFiles/Links/MathLink/DeveloperKit/Linux-x86-64/CompilerAdditions;/home/picaud/.Mathematica/SystemFiles/LibraryResources/Linux-x86-64;/home/picaud/.Mathematica/Applications
#+END_EXAMPLE

These information are printed in a form easily readable by Meson (see )

** Meson files 

I tried to only use the strict minimum to make it works.

*** =./meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
#----------------
# Regular Meson C++ project
#----------------
project('Meson_MMA_Demo', 'cpp')

subdir('src')

#----------------
# MMA specific
#----------------
mma_wolframscript = find_program('wolframscript')

if mma_wolframscript.found()
  subdir('mma')
else
  warning('Mathematica not found!')
endif

#+END_SRC

*** =./src/meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./src/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
demo_sparse_sources = ['demo_sparse.cpp']

shared_library('demo_sparse',
	       sources: [demo_sparse_sources],
	       include_directories: mma_include_directories,
	       install: true,
	       install_dir: mma_library_install_dir)

install_data('sparseDemoPackage.wl',
	     install_dir: mma_package_install_dir )
	     
#+END_SRC

* Useful references

- [[https://community.wolfram.com/groups/-/m/t/189016][Doing nothing with LibraryLink]] a great tutorial, certainly the place where to begin with 
- [[https://www.youtube.com/watch?v=Acjjj6zGem0&t=1172s][a short but instructive video about LibraryLink]]
- [[https://reference.wolfram.com/language/LibraryLink/tutorial/Overview.html][Wolfram LibraryLink User Guide (official)]]
