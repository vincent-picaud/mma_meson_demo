#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
#+TITLE: Wolfram LibraryLink + Meson
  
* What is it?

The goal is to use the [[https://mesonbuild.com/][Meson build system]] to define an *easy to use* and
*portable* solution for Mathematica [[https://reference.wolfram.com/language/LibraryLink/tutorial/InteractionWithMathematica.html][Wolfram LibraryLink developments]]. This GitHub
repo is a small illustrative example.

* How to use it?

** Compile and install the package 

#+BEGIN_SRC sh :eval never
git clone git@github.com:vincent-picaud/mma_meson_demo.git
cd mma_meson_demo
meson build --prefix=./install_dir
cd build
ninja install
#+END_SRC

** Mathematica side

Then, under Mathematica (MMA):


#+BEGIN_SRC wolfram :eval never
<< myLib`

?"myLib`*"
data = {2, 1, 3, 5, 6, 6, 4, 3, 2, 4, 7, 3, 2, 4, 2, 2, 1};
algorithm1[data, 10]
#+END_SRC

*note:* if you recompile the c++ code, you must unload the library to
take into account the modifications: =myLib`Private`unload[]=

* Help needed

I have no access to Windows. It would we nice to have some feedback
concerning this platform.

- [X] Mathematica v10.0 + Linux
- [X] Mathematica v11.2 + Linux
- [X] Mathematica  + MacOS
- [ ] Mathematica  + Windows ? 

* How it works?

** =config.wls=

The =config.wls= file extracts the relevant information required by the
Meson build process.

#+BEGIN_SRC sh :exports results :wrap SRC wolfram :results drawer
cat ./mma/config.wls
#+END_SRC

#+RESULTS:
#+BEGIN_SRC wolfram
libraryLinkIncludeDirectories={FileNameJoin[{$InstallationDirectory,"SystemFiles","IncludeFiles","C"}],
			       FileNameJoin[{$InstallationDirectory,"SystemFiles","Links","MathLink","DeveloperKit",$SystemID,"CompilerAdditions"}]};
libraryInstallDirectory=FileNameJoin[{$UserBaseDirectory,"SystemFiles","LibraryResources",$SystemID}];
packageInstallDirectory=FileNameJoin[{$UserBaseDirectory,"Applications"}];

(* MMA < v10.1 does not have native StringRiffle *)
stringRiffle[stringList_List,sep_String]:=TextString[stringList, ListFormat -> {"", sep, ""}];
format[s_List]:=stringRiffle[s,","]

(* stdout result *)
Print[format[libraryLinkIncludeDirectories]<>";"<>libraryInstallDirectory<>";"<>packageInstallDirectory]

#+END_SRC

** Meson files 

I tried to only use the strict minimum to make it works.

*** =./meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
# This is a minimal example showing how to integrate C++ and Mathematica's LibraryLink
# Tested under MMA V11.2, Linux
#
project('Meson_MMA_Demo', 'cpp')

subdir('src')

# MMA part 
mma_wolframscript = find_program('wolframscript')

if mma_wolframscript.found()
  subdir('mma')
else
  warning('Mathematica not found!')
endif

#+END_SRC

*** =./src/meson.build=

#+BEGIN_SRC sh :exports results :wrap SRC meson :results drawer
cat ./src/meson.build
#+END_SRC

#+RESULTS:
#+BEGIN_SRC meson
demo_sparse_sources = ['demo_sparse.cpp']

shared_library('demo_sparse',
	       sources: [demo_sparse_sources],
	       include_directories: mma_include_directories,
	       install: true,
	       install_dir: mma_library_install_dir)

install_data('sparseDemoPackage.wl',
	     install_dir: mma_package_install_dir )
	     
#+END_SRC

* Useful references

- [[https://community.wolfram.com/groups/-/m/t/189016][Doing nothing with LibraryLink]] a great tutorial, certainly the place where to begin with 
- [[https://www.youtube.com/watch?v=Acjjj6zGem0&t=1172s][a short but instructive video about LibraryLink]]
- [[https://reference.wolfram.com/language/LibraryLink/tutorial/Overview.html][Wolfram LibraryLink User Guide (official)]]
